The world is in big CATastrophe.  Most people love cats and obey them! Look at the one on the right! So cute, so furry, you will be its slave forever! This cat's name is “?????????“. Enjoy it while you can!
Your task is simple. Just pet the cat a bit and you are done. Actually, you need to solve one hard programming problem in addition to petting ?????????.
You are given a C# code with valid syntax. You need to find all primitive types declaration in what scope are defined. Scopes are method scope, loop scope, conditional scope. 
•	Conditional statements scope – find all primitive data type variable names declared in "if-else" code blocks. Do not check for "switch" code blocks.
•	Loops scope – find all primitive data type variables names declared in "for", "while" and "foreach" loops. Do not check for "do-while" loops.
•	Method scope – find all primitive data type variable names declared in methods (and not declared in loops and conditional statements).
Primitive data types are: sbyte, byte, short, ushort, int, uint, long, ulong, float, double, decimal, bool, char, string. Nullable types should be counted.
See the example below for better clarification.
For your convenience (and because the cat is cute) the C# code have some limitations to make the task easier.
•	The code will be fully understandable by you for your current level at C# Part 2. There will be no strange structures, object oriented programming, cats lurking around the text, unknown keywords, CATaclysms, whatsoever… 
•	There will not be any class level variables.
•	All variables will be declared with their keywords.
•	The code may or may not have the namespace declaration. 
•	All method declarations will be static without any access modifiers. Access modifiers are “public”, “private”, “internal” and “protected”.
•	The code will not be necessary compiling but will be with valid C# syntax.
•	All curly brackets will be formatted and put on correct separate lines.
•	All method names will be on the same line with the static keyword.
•	There will not be any other static declarations except for the methods.
•	There will not be any commented code or code in strings.
•	The code will be easily readable. There will not be any unnecessary line breaks and empty new lines. Unnecessary spaces may occur here and there though (????????? is playful).

You will be given N lines with C# code. Find all declared variable names of primitive types in which scope they live. Order the variable names in the way they appear in the code. If there are no variables in certain scope, print "{scope} -> None". Print the result on three separate lines in the following format:
"Methods -> {number of variables} -> {var1, var2, var3}"
"Loops -> {number of variables} -> {var1, var2, var3}"
"Conditional Statements -> {number of variables} -> {var1, var2, var3}"
%
3 cats
2 songs
Cat 2 knows song 2
Cat 1 knows song 1
Cat 3 knows song 1
Cat 2 knows song 1
Mew!
%
1