You are part of the back-end development team of the next Facebook. You are given a line of usernames,
between one of the following symbols: space, “/”, “\”, “(“, “)”. First you have to export all valid usernames.
A valid username starts with a letter and can contain only letters, digits and “_”. It cannot be less than 3 or
more than 25 symbols long. Your task is to sum the length of every 2 consecutive valid usernames and print
on the console the 2 valid usernames with biggest sum of their lengths, each on a separate line.
Expected input: ds3bhj y1ter/wfsdg 1nh_jgf ds2c_vbg\4htref
Expected output:
wfsdg
ds2c_vbg
%ds3bhj y1ter/wfsdg 1nh_jgf ds2c_vbg\4htref
%wfsdg
ds2c_vbg
%using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

class ValidUsernames
{
    static void Main()
    {
        string input = Console.ReadLine();
        string userName = @"(?<=[\s\/\\(\)]|^)([A-Za-z]\w{2,24})(?=[\s\/\\(\)]|$)";
        MatchCollection matches = Regex.Matches(input, userName);
        List<string> valid = new List<string>();

        int biggestSum = 0;
        int pos = 0;
        for (int i = 0; i < matches.Count - 1; i++)
        {
            int currSum = matches[i].Length + matches[i + 1].Length;
            if (currSum > biggestSum)
            {
                biggestSum = currSum;
                pos = i;
            }
        }

        Console.WriteLine(matches[pos]);
        Console.WriteLine(matches[pos + 1]);
    }
}